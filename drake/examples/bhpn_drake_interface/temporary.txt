std::unique_ptr<systems::PidController<double>> valkyrie_controller(
    systems::RigidBodyPlant<double>* plant) {
  int num_actuators = 30;
  VectorX<double> kp(num_actuators);
  kp << 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
      1, 1, 1, 1, 1, 1;
  kp *= 1000;
  VectorX<double> ki(num_actuators);
  ki << 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0;
  VectorX<double> kd(num_actuators);
  kd << 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
      1, 1, 1, 1, 1, 1;
  kd *= 5;
  auto Binv = plant->get_rigid_body_tree()
                  .B.block(0, 0, num_actuators, num_actuators)
                  .inverse();
  return std::make_unique<systems::PidController<double>>(
      Binv, MatrixX<double>::Identity(2 * kp.size(), 2 * kp.size()), kp, ki,
      kd);
}

std::unique_ptr<systems::PidController<double>> pr2_controller(
    systems::RigidBodyPlant<double>* plant) {
  int num_actuators = 21;
  VectorX<double> kp(num_actuators);
  kp << 800000, 1000, 1000, 4000, 4100, 2000, 2000, 300, 80, 80, 80, 80, 4000, 4100, 2000,
      2000, 300, 80, 80, 80, 80;
  kp *= 0.5;
  VectorX<double> ki(num_actuators);
  ki << 50000, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15;
  ki *= 0.3;
  VectorX<double> kd(num_actuators);
  kd << 7, 7, 7, 7, 7, 7, 7, 2, 2, 1, 0, 0, 7, 7, 7, 7, 2, 2, 1, 0, 0;
  kd *= 0.1;
  auto Binv = plant->get_rigid_body_tree()
                  .B.block(0, 0, num_actuators, num_actuators)
                  .inverse();
  return std::make_unique<systems::PidController<double>>(
      Binv, MatrixX<double>::Identity(2 * kp.size(), 2 * kp.size()), kp, ki,
      kd);
}

std::unique_ptr<systems::InverseDynamicsController<double>> iiwa_controller(
    std::unique_ptr<RigidBodyTree<double>> tree_) {
  int num_actuators = 7;
  VectorX<double> kp(num_actuators);
  kp << 100, 100, 100, 100, 100, 100, 100;
  VectorX<double> ki(num_actuators);
  ki << 0, 0, 0, 0, 0, 0, 0;
  VectorX<double> kd(num_actuators);
  kd << 2, 2, 2, 2, 2, 2, 2;
  return std::make_unique<systems::InverseDynamicsController<double>>(
      std::move(tree_), kp, ki, kd, false);
}
